syntax = "proto3";

package flowctl;
option go_package = "github.com/withobsrvr/flowctl/proto;flowctlpb";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// Service types that can register with the control plane
enum ServiceType {
  SERVICE_TYPE_UNSPECIFIED = 0;
  SERVICE_TYPE_SOURCE = 1;
  SERVICE_TYPE_PROCESSOR = 2;
  SERVICE_TYPE_SINK = 3;
}

// Service registration information
message ServiceInfo {
  string service_id = 1;
  ServiceType service_type = 2;
  repeated string input_event_types = 3;  // For processors only
  repeated string output_event_types = 4; // For sources and processors
  string health_endpoint = 5;             // Prometheus metrics endpoint
  int32 max_inflight = 6;                 // Back-pressure credits
  map<string, string> metadata = 7;       // Additional service metadata
}

// Registration acknowledgment
message RegistrationAck {
  string service_id = 1;
  repeated string topic_names = 2;        // Kafka topics to consume/produce
  map<string, string> connection_info = 3; // Connection details (endpoints, creds)
}

// ServiceHeartbeat message
message ServiceHeartbeat {
  string service_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  map<string, double> metrics = 3;        // Service-specific metrics
}

// Service status information
message ServiceStatus {
  string service_id = 1;
  ServiceType service_type = 2;
  bool is_healthy = 3;
  google.protobuf.Timestamp last_heartbeat = 4;
  map<string, double> metrics = 5;
}

// List of registered services
message ServiceList {
  repeated ServiceStatus services = 1;
}

// Control plane service definition
service ControlPlane {
  // Register a new service with the control plane
  rpc Register(ServiceInfo) returns (RegistrationAck);
  
  // Send periodic heartbeats
  rpc Heartbeat(ServiceHeartbeat) returns (google.protobuf.Empty);
  
  // Get service status
  rpc GetServiceStatus(ServiceInfo) returns (ServiceStatus);
  
  // List all registered services
  rpc ListServices(google.protobuf.Empty) returns (ServiceList);
} 