// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/source.proto

package flowctlpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LedgerSource_StreamRawLedgers_FullMethodName = "/flowctl.LedgerSource/StreamRawLedgers"
	LedgerSource_Ping_FullMethodName             = "/flowctl.LedgerSource/Ping"
	LedgerSource_Shutdown_FullMethodName         = "/flowctl.LedgerSource/Shutdown"
)

// LedgerSourceClient is the client API for LedgerSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Source service definition
type LedgerSourceClient interface {
	// Stream raw ledgers from Stellar
	StreamRawLedgers(ctx context.Context, in *SourceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RawLedger], error)
	// Lifecycle methods
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type ledgerSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerSourceClient(cc grpc.ClientConnInterface) LedgerSourceClient {
	return &ledgerSourceClient{cc}
}

func (c *ledgerSourceClient) StreamRawLedgers(ctx context.Context, in *SourceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RawLedger], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LedgerSource_ServiceDesc.Streams[0], LedgerSource_StreamRawLedgers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SourceRequest, RawLedger]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerSource_StreamRawLedgersClient = grpc.ServerStreamingClient[RawLedger]

func (c *ledgerSourceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pong)
	err := c.cc.Invoke(ctx, LedgerSource_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerSourceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, LedgerSource_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerSourceServer is the server API for LedgerSource service.
// All implementations must embed UnimplementedLedgerSourceServer
// for forward compatibility.
//
// Source service definition
type LedgerSourceServer interface {
	// Stream raw ledgers from Stellar
	StreamRawLedgers(*SourceRequest, grpc.ServerStreamingServer[RawLedger]) error
	// Lifecycle methods
	Ping(context.Context, *empty.Empty) (*Pong, error)
	Shutdown(context.Context, *ShutdownRequest) (*empty.Empty, error)
	mustEmbedUnimplementedLedgerSourceServer()
}

// UnimplementedLedgerSourceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLedgerSourceServer struct{}

func (UnimplementedLedgerSourceServer) StreamRawLedgers(*SourceRequest, grpc.ServerStreamingServer[RawLedger]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRawLedgers not implemented")
}
func (UnimplementedLedgerSourceServer) Ping(context.Context, *empty.Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLedgerSourceServer) Shutdown(context.Context, *ShutdownRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedLedgerSourceServer) mustEmbedUnimplementedLedgerSourceServer() {}
func (UnimplementedLedgerSourceServer) testEmbeddedByValue()                      {}

// UnsafeLedgerSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerSourceServer will
// result in compilation errors.
type UnsafeLedgerSourceServer interface {
	mustEmbedUnimplementedLedgerSourceServer()
}

func RegisterLedgerSourceServer(s grpc.ServiceRegistrar, srv LedgerSourceServer) {
	// If the following call pancis, it indicates UnimplementedLedgerSourceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LedgerSource_ServiceDesc, srv)
}

func _LedgerSource_StreamRawLedgers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerSourceServer).StreamRawLedgers(m, &grpc.GenericServerStream[SourceRequest, RawLedger]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerSource_StreamRawLedgersServer = grpc.ServerStreamingServer[RawLedger]

func _LedgerSource_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerSourceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerSource_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerSourceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerSource_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerSourceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerSource_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerSourceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LedgerSource_ServiceDesc is the grpc.ServiceDesc for LedgerSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LedgerSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flowctl.LedgerSource",
	HandlerType: (*LedgerSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LedgerSource_Ping_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _LedgerSource_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRawLedgers",
			Handler:       _LedgerSource_StreamRawLedgers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/source.proto",
}
