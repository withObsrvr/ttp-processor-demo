// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: proto/control_plane.proto

package flowctlpb

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Service types that can register with the control plane
type ServiceType int32

const (
	ServiceType_SERVICE_TYPE_UNSPECIFIED ServiceType = 0
	ServiceType_SERVICE_TYPE_SOURCE      ServiceType = 1
	ServiceType_SERVICE_TYPE_PROCESSOR   ServiceType = 2
	ServiceType_SERVICE_TYPE_SINK        ServiceType = 3
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "SERVICE_TYPE_SOURCE",
		2: "SERVICE_TYPE_PROCESSOR",
		3: "SERVICE_TYPE_SINK",
	}
	ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"SERVICE_TYPE_SOURCE":      1,
		"SERVICE_TYPE_PROCESSOR":   2,
		"SERVICE_TYPE_SINK":        3,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_control_plane_proto_enumTypes[0].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_proto_control_plane_proto_enumTypes[0]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_control_plane_proto_rawDescGZIP(), []int{0}
}

// Service registration information
type ServiceInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServiceId        string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ServiceType      ServiceType            `protobuf:"varint,2,opt,name=service_type,json=serviceType,proto3,enum=flowctl.ServiceType" json:"service_type,omitempty"`
	InputEventTypes  []string               `protobuf:"bytes,3,rep,name=input_event_types,json=inputEventTypes,proto3" json:"input_event_types,omitempty"`                                    // For processors only
	OutputEventTypes []string               `protobuf:"bytes,4,rep,name=output_event_types,json=outputEventTypes,proto3" json:"output_event_types,omitempty"`                                 // For sources and processors
	HealthEndpoint   string                 `protobuf:"bytes,5,opt,name=health_endpoint,json=healthEndpoint,proto3" json:"health_endpoint,omitempty"`                                         // Prometheus metrics endpoint
	MaxInflight      int32                  `protobuf:"varint,6,opt,name=max_inflight,json=maxInflight,proto3" json:"max_inflight,omitempty"`                                                 // Back-pressure credits
	Metadata         map[string]string      `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional service metadata
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	mi := &file_proto_control_plane_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceInfo) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceInfo) GetServiceType() ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ServiceType_SERVICE_TYPE_UNSPECIFIED
}

func (x *ServiceInfo) GetInputEventTypes() []string {
	if x != nil {
		return x.InputEventTypes
	}
	return nil
}

func (x *ServiceInfo) GetOutputEventTypes() []string {
	if x != nil {
		return x.OutputEventTypes
	}
	return nil
}

func (x *ServiceInfo) GetHealthEndpoint() string {
	if x != nil {
		return x.HealthEndpoint
	}
	return ""
}

func (x *ServiceInfo) GetMaxInflight() int32 {
	if x != nil {
		return x.MaxInflight
	}
	return 0
}

func (x *ServiceInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Registration acknowledgment
type RegistrationAck struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ServiceId      string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	TopicNames     []string               `protobuf:"bytes,2,rep,name=topic_names,json=topicNames,proto3" json:"topic_names,omitempty"`                                                                                       // Kafka topics to consume/produce
	ConnectionInfo map[string]string      `protobuf:"bytes,3,rep,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Connection details (endpoints, creds)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RegistrationAck) Reset() {
	*x = RegistrationAck{}
	mi := &file_proto_control_plane_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationAck) ProtoMessage() {}

func (x *RegistrationAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationAck.ProtoReflect.Descriptor instead.
func (*RegistrationAck) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_proto_rawDescGZIP(), []int{1}
}

func (x *RegistrationAck) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *RegistrationAck) GetTopicNames() []string {
	if x != nil {
		return x.TopicNames
	}
	return nil
}

func (x *RegistrationAck) GetConnectionInfo() map[string]string {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

// ServiceHeartbeat message
type ServiceHeartbeat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceId     string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metrics       map[string]float64     `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"` // Service-specific metrics
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceHeartbeat) Reset() {
	*x = ServiceHeartbeat{}
	mi := &file_proto_control_plane_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceHeartbeat) ProtoMessage() {}

func (x *ServiceHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceHeartbeat.ProtoReflect.Descriptor instead.
func (*ServiceHeartbeat) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceHeartbeat) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceHeartbeat) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ServiceHeartbeat) GetMetrics() map[string]float64 {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Service status information
type ServiceStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceId     string                 `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ServiceType   ServiceType            `protobuf:"varint,2,opt,name=service_type,json=serviceType,proto3,enum=flowctl.ServiceType" json:"service_type,omitempty"`
	IsHealthy     bool                   `protobuf:"varint,3,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
	LastHeartbeat *timestamp.Timestamp   `protobuf:"bytes,4,opt,name=last_heartbeat,json=lastHeartbeat,proto3" json:"last_heartbeat,omitempty"`
	Metrics       map[string]float64     `protobuf:"bytes,5,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	mi := &file_proto_control_plane_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceStatus) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceStatus) GetServiceType() ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ServiceType_SERVICE_TYPE_UNSPECIFIED
}

func (x *ServiceStatus) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

func (x *ServiceStatus) GetLastHeartbeat() *timestamp.Timestamp {
	if x != nil {
		return x.LastHeartbeat
	}
	return nil
}

func (x *ServiceStatus) GetMetrics() map[string]float64 {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// List of registered services
type ServiceList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Services      []*ServiceStatus       `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceList) Reset() {
	*x = ServiceList{}
	mi := &file_proto_control_plane_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceList) ProtoMessage() {}

func (x *ServiceList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceList.ProtoReflect.Descriptor instead.
func (*ServiceList) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceList) GetServices() []*ServiceStatus {
	if x != nil {
		return x.Services
	}
	return nil
}

var File_proto_control_plane_proto protoreflect.FileDescriptor

const file_proto_control_plane_proto_rawDesc = "" +
	"\n" +
	"\x19proto/control_plane.proto\x12\aflowctl\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x88\x03\n" +
	"\vServiceInfo\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x127\n" +
	"\fservice_type\x18\x02 \x01(\x0e2\x14.flowctl.ServiceTypeR\vserviceType\x12*\n" +
	"\x11input_event_types\x18\x03 \x03(\tR\x0finputEventTypes\x12,\n" +
	"\x12output_event_types\x18\x04 \x03(\tR\x10outputEventTypes\x12'\n" +
	"\x0fhealth_endpoint\x18\x05 \x01(\tR\x0ehealthEndpoint\x12!\n" +
	"\fmax_inflight\x18\x06 \x01(\x05R\vmaxInflight\x12>\n" +
	"\bmetadata\x18\a \x03(\v2\".flowctl.ServiceInfo.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xeb\x01\n" +
	"\x0fRegistrationAck\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x12\x1f\n" +
	"\vtopic_names\x18\x02 \x03(\tR\n" +
	"topicNames\x12U\n" +
	"\x0fconnection_info\x18\x03 \x03(\v2,.flowctl.RegistrationAck.ConnectionInfoEntryR\x0econnectionInfo\x1aA\n" +
	"\x13ConnectionInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe9\x01\n" +
	"\x10ServiceHeartbeat\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12@\n" +
	"\ametrics\x18\x03 \x03(\v2&.flowctl.ServiceHeartbeat.MetricsEntryR\ametrics\x1a:\n" +
	"\fMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"\xc4\x02\n" +
	"\rServiceStatus\x12\x1d\n" +
	"\n" +
	"service_id\x18\x01 \x01(\tR\tserviceId\x127\n" +
	"\fservice_type\x18\x02 \x01(\x0e2\x14.flowctl.ServiceTypeR\vserviceType\x12\x1d\n" +
	"\n" +
	"is_healthy\x18\x03 \x01(\bR\tisHealthy\x12A\n" +
	"\x0elast_heartbeat\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\rlastHeartbeat\x12=\n" +
	"\ametrics\x18\x05 \x03(\v2#.flowctl.ServiceStatus.MetricsEntryR\ametrics\x1a:\n" +
	"\fMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"A\n" +
	"\vServiceList\x122\n" +
	"\bservices\x18\x01 \x03(\v2\x16.flowctl.ServiceStatusR\bservices*w\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13SERVICE_TYPE_SOURCE\x10\x01\x12\x1a\n" +
	"\x16SERVICE_TYPE_PROCESSOR\x10\x02\x12\x15\n" +
	"\x11SERVICE_TYPE_SINK\x10\x032\x8a\x02\n" +
	"\fControlPlane\x12:\n" +
	"\bRegister\x12\x14.flowctl.ServiceInfo\x1a\x18.flowctl.RegistrationAck\x12>\n" +
	"\tHeartbeat\x12\x19.flowctl.ServiceHeartbeat\x1a\x16.google.protobuf.Empty\x12@\n" +
	"\x10GetServiceStatus\x12\x14.flowctl.ServiceInfo\x1a\x16.flowctl.ServiceStatus\x12<\n" +
	"\fListServices\x12\x16.google.protobuf.Empty\x1a\x14.flowctl.ServiceListB/Z-github.com/withobsrvr/flowctl/proto;flowctlpbb\x06proto3"

var (
	file_proto_control_plane_proto_rawDescOnce sync.Once
	file_proto_control_plane_proto_rawDescData []byte
)

func file_proto_control_plane_proto_rawDescGZIP() []byte {
	file_proto_control_plane_proto_rawDescOnce.Do(func() {
		file_proto_control_plane_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_control_plane_proto_rawDesc), len(file_proto_control_plane_proto_rawDesc)))
	})
	return file_proto_control_plane_proto_rawDescData
}

var file_proto_control_plane_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_control_plane_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_control_plane_proto_goTypes = []any{
	(ServiceType)(0),            // 0: flowctl.ServiceType
	(*ServiceInfo)(nil),         // 1: flowctl.ServiceInfo
	(*RegistrationAck)(nil),     // 2: flowctl.RegistrationAck
	(*ServiceHeartbeat)(nil),    // 3: flowctl.ServiceHeartbeat
	(*ServiceStatus)(nil),       // 4: flowctl.ServiceStatus
	(*ServiceList)(nil),         // 5: flowctl.ServiceList
	nil,                         // 6: flowctl.ServiceInfo.MetadataEntry
	nil,                         // 7: flowctl.RegistrationAck.ConnectionInfoEntry
	nil,                         // 8: flowctl.ServiceHeartbeat.MetricsEntry
	nil,                         // 9: flowctl.ServiceStatus.MetricsEntry
	(*timestamp.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(*empty.Empty)(nil),         // 11: google.protobuf.Empty
}
var file_proto_control_plane_proto_depIdxs = []int32{
	0,  // 0: flowctl.ServiceInfo.service_type:type_name -> flowctl.ServiceType
	6,  // 1: flowctl.ServiceInfo.metadata:type_name -> flowctl.ServiceInfo.MetadataEntry
	7,  // 2: flowctl.RegistrationAck.connection_info:type_name -> flowctl.RegistrationAck.ConnectionInfoEntry
	10, // 3: flowctl.ServiceHeartbeat.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 4: flowctl.ServiceHeartbeat.metrics:type_name -> flowctl.ServiceHeartbeat.MetricsEntry
	0,  // 5: flowctl.ServiceStatus.service_type:type_name -> flowctl.ServiceType
	10, // 6: flowctl.ServiceStatus.last_heartbeat:type_name -> google.protobuf.Timestamp
	9,  // 7: flowctl.ServiceStatus.metrics:type_name -> flowctl.ServiceStatus.MetricsEntry
	4,  // 8: flowctl.ServiceList.services:type_name -> flowctl.ServiceStatus
	1,  // 9: flowctl.ControlPlane.Register:input_type -> flowctl.ServiceInfo
	3,  // 10: flowctl.ControlPlane.Heartbeat:input_type -> flowctl.ServiceHeartbeat
	1,  // 11: flowctl.ControlPlane.GetServiceStatus:input_type -> flowctl.ServiceInfo
	11, // 12: flowctl.ControlPlane.ListServices:input_type -> google.protobuf.Empty
	2,  // 13: flowctl.ControlPlane.Register:output_type -> flowctl.RegistrationAck
	11, // 14: flowctl.ControlPlane.Heartbeat:output_type -> google.protobuf.Empty
	4,  // 15: flowctl.ControlPlane.GetServiceStatus:output_type -> flowctl.ServiceStatus
	5,  // 16: flowctl.ControlPlane.ListServices:output_type -> flowctl.ServiceList
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_control_plane_proto_init() }
func file_proto_control_plane_proto_init() {
	if File_proto_control_plane_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_control_plane_proto_rawDesc), len(file_proto_control_plane_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_control_plane_proto_goTypes,
		DependencyIndexes: file_proto_control_plane_proto_depIdxs,
		EnumInfos:         file_proto_control_plane_proto_enumTypes,
		MessageInfos:      file_proto_control_plane_proto_msgTypes,
	}.Build()
	File_proto_control_plane_proto = out.File
	file_proto_control_plane_proto_goTypes = nil
	file_proto_control_plane_proto_depIdxs = nil
}
