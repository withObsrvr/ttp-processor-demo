// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/sink.proto

package flowctlpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventSink_Ingest_FullMethodName   = "/flowctl.EventSink/Ingest"
	EventSink_Ping_FullMethodName     = "/flowctl.EventSink/Ping"
	EventSink_Shutdown_FullMethodName = "/flowctl.EventSink/Shutdown"
)

// EventSinkClient is the client API for EventSink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sink service definition
type EventSinkClient interface {
	// Stream events to the sink
	Ingest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Event, SinkAck], error)
	// Lifecycle methods
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type eventSinkClient struct {
	cc grpc.ClientConnInterface
}

func NewEventSinkClient(cc grpc.ClientConnInterface) EventSinkClient {
	return &eventSinkClient{cc}
}

func (c *eventSinkClient) Ingest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Event, SinkAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventSink_ServiceDesc.Streams[0], EventSink_Ingest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Event, SinkAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventSink_IngestClient = grpc.ClientStreamingClient[Event, SinkAck]

func (c *eventSinkClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pong)
	err := c.cc.Invoke(ctx, EventSink_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSinkClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, EventSink_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventSinkServer is the server API for EventSink service.
// All implementations must embed UnimplementedEventSinkServer
// for forward compatibility.
//
// Sink service definition
type EventSinkServer interface {
	// Stream events to the sink
	Ingest(grpc.ClientStreamingServer[Event, SinkAck]) error
	// Lifecycle methods
	Ping(context.Context, *empty.Empty) (*Pong, error)
	Shutdown(context.Context, *ShutdownRequest) (*empty.Empty, error)
	mustEmbedUnimplementedEventSinkServer()
}

// UnimplementedEventSinkServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventSinkServer struct{}

func (UnimplementedEventSinkServer) Ingest(grpc.ClientStreamingServer[Event, SinkAck]) error {
	return status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (UnimplementedEventSinkServer) Ping(context.Context, *empty.Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedEventSinkServer) Shutdown(context.Context, *ShutdownRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedEventSinkServer) mustEmbedUnimplementedEventSinkServer() {}
func (UnimplementedEventSinkServer) testEmbeddedByValue()                   {}

// UnsafeEventSinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventSinkServer will
// result in compilation errors.
type UnsafeEventSinkServer interface {
	mustEmbedUnimplementedEventSinkServer()
}

func RegisterEventSinkServer(s grpc.ServiceRegistrar, srv EventSinkServer) {
	// If the following call pancis, it indicates UnimplementedEventSinkServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventSink_ServiceDesc, srv)
}

func _EventSink_Ingest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventSinkServer).Ingest(&grpc.GenericServerStream[Event, SinkAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventSink_IngestServer = grpc.ClientStreamingServer[Event, SinkAck]

func _EventSink_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSinkServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventSink_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSinkServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSink_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSinkServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventSink_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSinkServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventSink_ServiceDesc is the grpc.ServiceDesc for EventSink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventSink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flowctl.EventSink",
	HandlerType: (*EventSinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _EventSink_Ping_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _EventSink_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ingest",
			Handler:       _EventSink_Ingest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/sink.proto",
}
